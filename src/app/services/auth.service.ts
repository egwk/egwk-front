import {Injectable} from '@angular/core';
import {HttpClient} from "@angular/common/http";
import {AppSettings} from "../app.settings";
import {Observable} from "rxjs";
import {AuthModel} from "../models/settingsModel";
import {LocalStorageService} from "./local-storage.service";

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  protected _auth: AuthModel = new AuthModel();

  constructor(
    protected http: HttpClient,
    protected ls: LocalStorageService
  ) {
  }

  as3rdPartyApp(code) {
    // open `AppSettings.AUTH_3RDP_AUTHORIZATION_FULL_URL` first
    return this.http.post(AppSettings.AUTH_3RDP_TOKEN_URL, {
      grant_type: "authorization_code",
      client_id: AppSettings.AS3RDP_CLIENT_ID, // as generated by `php artisan passport:client --client`
      client_secret: AppSettings.AS3RDP_CLIENT_SECRET, // as generated by `php artisan passport:client --client`
      redirect_uri: AppSettings.AS3RDP_CLIENT_REDIRECT_URI, // exactly as in the DB!
      code: code,
    })
      .subscribe(response => {
        // todo: store token
        // console.log(response);
      });
  }

  logout() {
    this.ls.del('auth');
  }

  login(username, password): Observable<any> {
    return this.http.post(AppSettings.AUTH_TOKEN_URL, {
      grant_type: "password",
      client_id: AppSettings.CLIENT_ID, // as generated by `php artisan passport:client --client`
      client_secret: AppSettings.CLIENT_SECRET, // as generated by `php artisan passport:client --client`
      username: username,
      password: password,
      scope: "*"
    })
  }

  get auth(): AuthModel {
    let auth = this.ls.get('auth');
    if (auth) {
      this._auth = auth;
    }
    return this._auth;
  }

  set auth(auth: AuthModel) {
    this._auth = auth;
    this.ls.set('auth', auth, Date.now() + auth.expires_in * 1000 - 2000);
  }

  get loggedIn(): boolean {
    return this.ls.get('auth') ? true : false;
  }

  get permissions(): Array<string> {
    return ['*']; // todo
  }

  setAuth(response, username) {
    if (response.access_token) {
      this.auth = <AuthModel>{
        access_token: response.access_token,
        expires_in: response.expires_in,
        refresh_token: response.refresh_token,
        token_type: response.token_type,
        username: username
      };
    }
  }

}
